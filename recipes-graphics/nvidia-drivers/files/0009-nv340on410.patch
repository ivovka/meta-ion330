--- kernel.orig/nv-linux.h	2017-07-05 14:08:49.456666679 +0200
+++ kernel/nv-linux.h	2017-07-05 14:10:34.970000012 +0200
@@ -270,7 +270,7 @@
 
 extern int nv_pat_mode;
 
-#if !defined(NV_VMWARE) && defined(CONFIG_HOTPLUG_CPU)
+#if 0
 #define NV_ENABLE_HOTPLUG_CPU
 #include <linux/cpu.h>              /* CPU hotplug support              */
 #include <linux/notifier.h>         /* struct notifier_block, etc       */
--- kernel.orig/nv-p2p.c	2017-07-05 14:11:11.506666679 +0200
+++ kernel/nv-p2p.c	2017-07-05 14:13:45.593333340 +0200
@@ -112,7 +112,7 @@
 int nvidia_p2p_get_pages(
     uint64_t p2p_token,
     uint32_t va_space,
-    uint64_t virtual_address,
+    uint64_t address,
     uint64_t length,
     struct nvidia_p2p_page_table **page_table,
     void (*free_callback)(void * data),
@@ -136,7 +136,7 @@
         return -ENOMEM;
 
     status = rm_p2p_get_pages(sp, p2p_token, va_space,
-            virtual_address, length, &physical_addresses, &wreqmb_h,
+            address, length, &physical_addresses, &wreqmb_h,
             &rreqmb_h, &entries, *page_table,
             free_callback, data);
     if (status != RM_OK)
@@ -195,7 +195,7 @@
                 nvidia_p2p_page_t_cache);
     }
 
-    rm_p2p_put_pages(sp, p2p_token, va_space, virtual_address,
+    rm_p2p_put_pages(sp, p2p_token, va_space, address,
             *page_table);
 
     os_free_mem((*page_table)->pages);
@@ -232,7 +232,7 @@
 int nvidia_p2p_put_pages(
     uint64_t p2p_token,
     uint32_t va_space,
-    uint64_t virtual_address,
+    uint64_t address,
     struct nvidia_p2p_page_table *page_table
 )
 {
@@ -243,7 +243,7 @@
     if (sp == NULL)
         return -ENOMEM;
 
-    status = rm_p2p_put_pages(sp, p2p_token, va_space, virtual_address,
+    status = rm_p2p_put_pages(sp, p2p_token, va_space, address,
             page_table);
     if (status == RM_OK)
         nvidia_p2p_free_page_table(page_table);
